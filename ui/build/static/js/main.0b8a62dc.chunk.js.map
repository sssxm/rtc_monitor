{"version":3,"sources":["components/nav-bar/nav-bar.tsx","components/grid-container/grid-container.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavBar","state","count","style","padding","id","href","Title","React","GridContainer","props","gridRef","gridApi","gridColumnApi","defaultColDef","width","filter","sortable","resizable","columnDefs","headerName","field","cellRenderer","enableRowGroup","detailCellRendererParams","detailGridOptions","onFirstDataRendered","params","api","sizeColumnsToFit","getDetailRowData","successCallback","data","participants","template","getRowHeight","node","detail","length","rowData","onGridReady","columnApi","httpRequest","XMLHttpRequest","open","send","onreadystatechange","readyState","status","JSON","parse","responseText","setState","this","current","className","height","ref","masterDetail","rowGroupPanelShow","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b8a62dc.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport \"./nav-bar.css\";\r\n\r\nimport { BandwidthProvider } from \"@bandwidth/shared-components\";\r\nimport { Navigation } from \"@bandwidth/shared-components\";\r\n\r\n\r\nexport interface NavBarProps {}\r\n\r\nexport interface NavBarState {}\r\n\r\nclass NavBar extends React.Component<NavBarProps, NavBarState> {\r\n  state = {\r\n    count: 0\r\n  };\r\n\r\n  render() {\r\n    return (\r\n\r\n      <BandwidthProvider>\r\n        <Navigation style={{ padding: \"24\" }}>\r\n          <a id=\"title-link\" href=\"/\">\r\n            <Navigation.Title>\r\n              <strong>Session Monitor</strong>\r\n            </Navigation.Title>\r\n          </a>\r\n\r\n          <div id=\"list-item-container\">\r\n            <a\r\n              id=\"docs-link\"\r\n              href=\"https://drive.google.com/drive/u/0/folders/15xp911JrYMD3J9B1ONq0elzDR8o4TOiC\"\r\n            >\r\n              <text>Docs</text>\r\n            </a>\r\n            <a id=\"about-link\" href=\"/about\">\r\n              <text>About</text>\r\n            </a>\r\n          </div>\r\n        </Navigation>\r\n      </BandwidthProvider>\r\n    );\r\n  }\r\n\r\n  /** \r\n  formatCount() {\r\n    const { count } = this.state;\r\n    return count === 0 ? <text>NavBar</text> : count;\r\n  } */\r\n\r\n}\r\n\r\nexport default NavBar;\r\n","import * as React from \"react\";\r\n\r\nimport * as sessions from \"../../static_data/sessions.json\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-balham.css\";\r\nimport \"ag-grid-enterprise\";\r\n\r\nexport interface GridContainerProps {}\r\n\r\nexport interface GridContainerState {}\r\n\r\nclass GridContainer extends React.Component<\r\n  GridContainerProps,\r\n  GridContainerState\r\n> {\r\n\r\n  gridRef: any; //a React Ref for our grid component\r\n  gridApi: any; //class variable for direct reference to the grid API\r\n  gridColumnApi: any;\r\n\r\n\r\n  state = {\r\n    defaultColDef: {\r\n      width: 150,\r\n      filter: true,\r\n\r\n      sortable: true,\r\n      resizable: true\r\n    },\r\n    columnDefs: [\r\n      {\r\n        headerName: \"Name\",\r\n        field: \"name\",\r\n        cellRenderer: \"agGroupCellRenderer\"\r\n      },\r\n      {\r\n        headerName: \"ID\",\r\n        field: \"id\",\r\n        enableRowGroup: true,\r\n        width: 350\r\n      },\r\n      {\r\n        headerName: \"URL\",\r\n        field: \"callbackUrl\",\r\n        enableRowGroup: true,\r\n        width: 380\r\n      }\r\n    ],\r\n    detailCellRendererParams: {\r\n      detailGridOptions: {\r\n        columnDefs: [\r\n          {\r\n            headerName: \"Participant\",\r\n            field: \"displayName\"\r\n          },\r\n          {\r\n            headerName: \"ID\",\r\n            field: \"id\",\r\n            width: 125\r\n          },\r\n          {\r\n            headerName: \"Websocket\",\r\n            field: \"connectionId\"\r\n          },\r\n          {\r\n            headerName: \"Recording\",\r\n            field: \"capabilities.recordingEnabled\"\r\n          },\r\n          {\r\n            headerName: \"Video\",\r\n            field: \"capabilities.videoEnabled\",\r\n            width: 125\r\n          },\r\n          {\r\n            headerName: \"Chat\",\r\n            field: \"capabilities.chatEnabled\",\r\n            width: 125\r\n          },\r\n          {\r\n            headerName: \"Streams\",\r\n            field: \"streams\",\r\n            width: 140\r\n          },\r\n          {\r\n            headerName: \"User Agent\",\r\n            field: \"userAgent\"\r\n          }\r\n        ],\r\n        onFirstDataRendered(params) {\r\n          params.api.sizeColumnsToFit();\r\n        }\r\n      },\r\n      getDetailRowData: function(params) {\r\n        params.successCallback(params.data.participants);\r\n      },\r\n      template:\r\n        '<div style=\"height: 100%; background-color: #b3ecfb; padding: 20px; box-sizing: border-box;\">' +\r\n        '  <div ref=\"eDetailGrid\" style=\"height: 100%;\"></div>' +\r\n        \"</div>\"\r\n    },\r\n    getRowHeight: function(params) {\r\n      if (params.node && params.node.detail) {\r\n        var offset = 80;\r\n        var allDetailRowHeight = params.data.participants.length * 28;\r\n        return allDetailRowHeight + offset;\r\n      } else {\r\n        return 28;\r\n      }\r\n    },\r\n    rowData: []\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    this.gridRef = React.createRef();\r\n  }\r\n  //this method is called after render() - hence after the this.gridRef is populated.\r\n  //Now, we can use a class variable to set up a direct reference to the grid API.\r\n  componentDidMount() {\r\n    this.gridApi = this.gridRef.current.api;\r\n    this.gridColumnApi = this.gridRef.current.api;\r\n  }\r\n\r\n  onGridReady = params => {\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n\r\n    const httpRequest = new XMLHttpRequest();\r\n    const updateData = data => {\r\n      this.setState({ rowData: data });\r\n    };\r\n\r\n    //to get around CORS issue, used proxy\r\n    //https://stackoverflow.com/questions/43871637/no-access-control-allow-origin-header-is-present-on-the-requested-resource-whe/43881141#43881141\r\n    httpRequest.open(\r\n      \"GET\",\r\n      \"https://cors-anywhere.herokuapp.com/https://80xj1ilnhd.execute-api.us-east-1.amazonaws.com/mock_api/java-version-mock-api\"\r\n    );\r\n    httpRequest.send();\r\n    httpRequest.onreadystatechange = () => {\r\n      if (httpRequest.readyState === 4 && httpRequest.status === 200) {\r\n        updateData(JSON.parse(httpRequest.responseText));\r\n      }\r\n    };\r\n\r\n    // setTimeout(function() {\r\n    //   var rowCount = 0;\r\n    //   params.api.forEachNode(function(node) {\r\n    //     node.setExpanded(rowCount++ === 1);\r\n    //   });\r\n    // }, 500);\r\n\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        id=\"sessionGrid\"\r\n        className=\"ag-theme-balham\"\r\n        style={{\r\n          height: \"570px\",\r\n\r\n          width: \"900px\"\r\n        }}\r\n      >\r\n        <AgGridReact\r\n          ref={this.gridRef}\r\n          columnDefs={this.state.columnDefs}\r\n          defaultColDef={this.state.defaultColDef}\r\n          masterDetail={true}\r\n          detailCellRendererParams={this.state.detailCellRendererParams}\r\n          getRowHeight={this.state.getRowHeight}\r\n          rowData={this.state.rowData}\r\n          onGridReady={this.onGridReady}\r\n\r\n          rowGroupPanelShow=\"always\"\r\n        ></AgGridReact>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GridContainer;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport NavBar from \"./components/nav-bar/nav-bar\";\r\nimport GridContainer from \"./components/grid-container/grid-container\";\r\nimport { BandwidthProvider } from \"@bandwidth/shared-components\";\r\nimport \"@bandwidth/shared-components/fonts/fonts.css\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <BandwidthProvider>\r\n      <div className=\"App\">\r\n        <NavBar> </NavBar>\r\n        <div className=\"grid_container\">\r\n          <GridContainer></GridContainer>\r\n        </div>\r\n      </div>\r\n    </BandwidthProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nimport { Route, BrowserRouter as Router } from \"react-router-dom\";\r\nimport AboutComponent from \"./components/about-component/about-component\";\r\n\r\n//const architecture = (\r\n//<Router>\r\n//<div>\r\n//<Route exact path=\"/\" component={App} />\r\n//<Route path=\"/about\" component={AboutComponent} />\r\n//</div>\r\n//</Router>\r\n//);\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}